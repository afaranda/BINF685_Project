#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jan 22 18:14:46 2020

@author: adam
"""
import numpy as np
import pandas as pd
from sklearn.metrics import mutual_info_score as mi
from pomegranate import BayesianNetwork as bn
from network import net
from network import export_pom
from network import sample_net
from numpy.random import choice


# Dependency Function 1
def dpf1(x, p=1):
    if x == 1:
        return(choice([1,0], p=[p, 1-p]))
    else:
        return(choice([1,0], p=[1-p,p]))
 

# Dependency Function 2  
def dpf2(x, y, p=1, q=1):
    if x == 1 and y == 1:
        return(choice([1,0], p=[p, 1-p]))
    elif x != 1 and y == 1:
        return(choice([1,0], p=[q, 1-q]))
    elif x == 1 and y != 1:
        return(choice([1,0], p=[1-q, q]))
    else:
        return(choice([1,0], p=[1-p,p]))


x=choice([0,1], size=100)
y=choice([0,1], size=100)
z=[dpf2(i[0],i[1], q=0.5) for i in zip(x,y)]
df=pd.DataFrame({'G1':x, 'G2':y, 'G3':z})


# Data Set 1: 20 independent variables, 1000 samples with frequencies
# In descending order
ds1 = pd.DataFrame(columns = ['G'+str(i) for i in range(0,20)])
for i in range(1,21):
    ds1['G'+str(i-1)]=choice([0,1],size=1000, p=[i/21, 1-(i/21)])
    

# Data Set 2: 20 variables with dependency groups of 5, where each variable
# in a group is dependent on the previous varible in increasing order
# eg. G1 depends on G0, G2 depends on G1 etc. . . Each group of five is
# independent from the other groups. 
    
ds2 = pd.DataFrame(columns = ['G'+str(i) for i in range(0,20)])
ds2['G0'] = choice([0,1],size=1000, p=[0.5, 0.5])
for i in range(1,5):
    ds2['G'+str(i)]=[dpf1(i, 0.95) for i in ds2['G'+str(i-1)]]
    
ds2['G5'] = choice([0,1],size=1000, p=[0.5, 0.5])
for i in range(6,10):
    ds2['G'+str(i)]=[dpf1(i, 0.95) for i in ds2['G'+str(i-1)]] 
    
ds2['G10'] = choice([0,1],size=1000, p=[0.5, 0.5])
for i in range(11,15):
    ds2['G'+str(i)]=[dpf1(i, 0.95) for i in ds2['G'+str(i-1)]] 

ds2['G15'] = choice([0,1],size=1000, p=[0.5, 0.5])
for i in range(16,20):
    ds2['G'+str(i)]=[dpf1(i, 0.95) for i in ds2['G'+str(i-1)]] 


# Data Set 3: 4 Variables generated by sampling from a fixed set of conditional
# probability tables (Example from: )

data=pd.DataFrame({
    'Icy':[0,1],  
    'Holmes':[0,1],
    'Watson':[0,1],
    'Ambulance':[0,1]
    })

n=net(data=data)
n.add_edge('Icy', 'Watson')
n.add_edge('Icy','Holmes')
n.add_edge('Holmes', 'Ambulance')
n.add_edge('Watson', 'Ambulance')


n.nds['Icy'].cpt=n.nds['Icy'].empty_cpt(
    ).rename(
        {0:'Icy'}, axis=1
    ).assign(Prob=[0.7, 0.3])

n.nds['Holmes'].cpt=n.nds['Holmes'].empty_cpt(
    ).rename(
        {0:'Icy', 2:'Holmes'}, axis=1
    ).assign(Prob=[0.9,0.1, 0.2, 0.8])

n.nds['Watson'].cpt=n.nds['Watson'].empty_cpt(
    ).rename(
        {0:'Icy', 1:'Watson'}, axis=1
    ).assign(Prob=[0.9,0.1, 0.2, 0.8])

n.nds['Ambulance'].cpt=n.nds['Ambulance'].empty_cpt(
    ).rename(
        {1:'Holmes', 2:'Watson', 3:'Ambulance'}, axis=1
    ).assign(Prob=[0.9,0.1, 0.5, 0.5, 0.4, 0.6, 0.2, 0.8])

        

# Data Set 4:  10 Variables generated by sampling from a 
# fixed set of conditional probability tables, with a maximum of 3 parents
# per table

data=pd.DataFrame({'G'+str(i):[0,1] for i in range(0,10)})

n=net(data=data)
n.add_edge('Icy', 'Watson')
n.add_edge('Icy','Holmes')

n.nds['Icy'].cpt=n.nds['Icy'].empty_cpt(
    ).rename(
        {0:'Icy'}, axis=1
    ).assign(Prob=[0.7, 0.3])

n.nds['Holmes'].cpt=n.nds['Holmes'].empty_cpt(
    ).rename(
        {0:'Icy', 2:'Holmes'}, axis=1
    ).assign(Prob=[0.9,0.1, 0.2, 0.8])

n.nds['Watson'].cpt=n.nds['Watson'].empty_cpt(
    ).rename(
        {0:'Icy', 1:'Watson'}, axis=1
    ).assign(Prob=[0.9,0.1, 0.2, 0.8])

# Import Alarm Network
from pgmpy.readwrite import BIFReader
from pgmpy.sampling.Sampling import GibbsSampling as gibbs
x=BIFReader("alarm.bif")

